# -*- coding: utf-8 -*-
"""Pass Heat Map.ipynb

Automatically generated by Colaboratory.

"""

!pip install mplsoccer

import matplotlib.pyplot as plt
from mplsoccer import Pitch, Sbopen, VerticalPitch
import pandas as pd

#open the data
parser = Sbopen()
df_match = parser.match(competition_id=72, season_id=30)
#our team
team = "England Women's"
#get list of games by our team, either home or away
match_ids = df_match.loc[(df_match["home_team_name"] == team) | (df_match["away_team_name"] == team)]["match_id"].tolist()
#calculate number of games
no_games = len(match_ids)

"""Danges Passes"""

#declare an empty dataframe
danger_passes = pd.DataFrame()
for idx in match_ids:
    #open the event data from this game
    df = parser.event(idx)[0]
    for period in [1, 2]:
        #keep only accurate passes by England that were not set pieces in this period
        mask_pass = (df.team_name == team) & (df.type_name == "Pass") & (df.outcome_name.isnull()) & (df.period == period) & (df.sub_type_name.isnull())
        #keep only necessary columns
        passes = df.loc[mask_pass, ["x", "y", "end_x", "end_y", "minute", "second", "player_name"]]
        #keep only Shots by England in this period
        mask_shot = (df.team_name == team) & (df.type_name == "Shot") & (df.period == period)
        #keep only necessary columns
        shots = df.loc[mask_shot, ["minute", "second"]]
        #convert time to seconds
        shot_times = shots['minute']*60+shots['second']
        shot_window = 15
        #find starts of the window
        shot_start = shot_times - shot_window
        #condition to avoid negative shot starts
        shot_start = shot_start.apply(lambda i: i if i>0 else (period-1)*45)
        #convert to seconds
        pass_times = passes['minute']*60+passes['second']
        #check if pass is in any of the windows for this half
        pass_to_shot = pass_times.apply(lambda x: True in ((shot_start < x) & (x < shot_times)).unique())

        #keep only danger passes
        danger_passes_period = passes.loc[pass_to_shot]
        #concatenate dataframe with a previous one to keep danger passes from the whole tournament
        danger_passes = pd.concat([danger_passes, danger_passes_period])

"""Plot location for danger passes"""

#plot pitch
pitch = Pitch(line_color='black')
fig, ax = pitch.grid(grid_height=0.9, title_height=0.06, axis=False,
                     endnote_height=0.04, title_space=0, endnote_space=0)
#scatter the location on the pitch
pitch.scatter(danger_passes.x, danger_passes.y, s=100, color='blue', edgecolors='grey', linewidth=1, alpha=0.2, ax=ax["pitch"])
#uncomment it to plot arrows
#pitch.arrows(danger_passes.x, danger_passes.y, danger_passes.end_x, danger_passes.end_y, color = "blue", ax=ax['pitch'])
#add title
fig.suptitle('Location of danger passes by ' + team, fontsize = 30)
plt.show()

"""Heat Map"""

#plot vertical pitch
pitch = Pitch(line_zorder=2, line_color='black')
fig, ax = pitch.grid(grid_height=0.9, title_height=0.06, axis=False,
                     endnote_height=0.04, title_space=0, endnote_space=0)
#get the 2D histogram
bin_statistic = pitch.bin_statistic(danger_passes.x, danger_passes.y, statistic='count', bins=(6, 5), normalize=False)
#normalize by number of games
bin_statistic["statistic"] = bin_statistic["statistic"]/no_games
#make a heatmap
pcm  = pitch.heatmap(bin_statistic, cmap='Reds', edgecolor='grey', ax=ax['pitch'])
#legend to our plot
ax_cbar = fig.add_axes((1, 0.093, 0.03, 0.786))
cbar = plt.colorbar(pcm, cax=ax_cbar)
fig.suptitle('Danger passes by ' + team + " per game", fontsize = 30)
plt.show()

#keep only surnames
danger_passes["player_name"] = danger_passes["player_name"].apply(lambda x: str(x).split()[-1])
#count passes by player and normalize them
pass_count = danger_passes.groupby(["player_name"]).x.count()/no_games
#make a histogram
ax = pass_count.plot.bar(pass_count)
#make legend
ax.set_xlabel("")
ax.set_ylabel("Number of danger passes per game")
plt.show()

"""FWC 2022"""

import pandas as pd
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)

#FCW data
competition_id = 43
season_id = 106
matches = parser.match(competition_id, season_id)

df, related, freeze, tactics = parser.event(69301)

def danger_passes_fwc(match_ids, team):

  no_games = len(match_ids)

  #declare an empty dataframe  
  danger_passes = pd.DataFrame()
  for idx in match_ids:
      #open the event data from this game
      df = parser.event(idx)[0]
      for period in [1, 2]:
          #keep only accurate passes by England that were not set pieces in this period
          mask_pass = (df.team_name == team) & (df.type_name == "Pass") & (df.outcome_name.isnull()) & (df.period == period) & (df.sub_type_name.isnull())
          #keep only necessary columns
          passes = df.loc[mask_pass, ["x", "y", "end_x", "end_y", "minute", "second", "player_name"]]
          #keep only Shots by England in this period
          mask_shot = (df.team_name == team) & (df.type_name == "Shot") & (df.period == period)
          #keep only necessary columns
          shots = df.loc[mask_shot, ["minute", "second"]]
          #convert time to seconds
          shot_times = shots['minute']*60+shots['second']
          shot_window = 15
          #find starts of the window
          shot_start = shot_times - shot_window
          #condition to avoid negative shot starts
          shot_start = shot_start.apply(lambda i: i if i>0 else (period-1)*45)
          #convert to seconds
          pass_times = passes['minute']*60+passes['second']
          #check if pass is in any of the windows for this half
          pass_to_shot = pass_times.apply(lambda x: True in ((shot_start < x) & (x < shot_times)).unique())

          #keep only danger passes
          danger_passes_period = passes.loc[pass_to_shot]
          #concatenate dataframe with a previous one to keep danger passes from the whole tournament
          danger_passes = pd.concat([danger_passes, danger_passes_period])

  pitch = Pitch(line_zorder=2, line_color='black')
  fig, ax = pitch.grid(grid_height=0.9, title_height=0.06, axis=False,
                      endnote_height=0.04, title_space=0, endnote_space=0)
  #get the 2D histogram
  bin_statistic = pitch.bin_statistic(danger_passes.x, danger_passes.y, statistic='count', bins=(6, 5), normalize=False)
  #normalize by number of games
  bin_statistic["statistic"] = bin_statistic["statistic"]/no_games
  #make a heatmap
  pcm  = pitch.heatmap(bin_statistic, cmap='Reds', edgecolor='grey', ax=ax['pitch'])
  #legend to our plot
  ax_cbar = fig.add_axes((1, 0.093, 0.03, 0.786))
  cbar = plt.colorbar(pcm, cax=ax_cbar)
  fig.suptitle('Danger passes by ' + team + " per game", fontsize = 30)
  plt.show()

  #keep only surnames
  #danger_passes["player_name"] = danger_passes["player_name"].apply(lambda x: str(x).split()[-1])
  #count passes by player and normalize them
  pass_count = danger_passes.groupby(["player_name"]).x.count()/no_games
  #make a histogram
  ax = pass_count.plot.bar(pass_count)
  #make legend
  ax.set_xlabel("")
  ax.set_ylabel("Number of danger passes per game")
  plt.show()

def get_matches(matches, team_name):
  df_matches = matches[(matches['home_team_name']==team_name) | (matches['away_team_name']==team_name)]
  return df_matches.sort_values(by='match_date',ascending=True)

argentina = get_matches(matches, 'France')
ids = argentina["match_id"].tolist()

def danger_passes_by_team(team):
  team_matches = get_matches(matches, team)
  ids = team_matches["match_id"].tolist()
  danger_passes_fwc(ids, team)

"""Danges Passes Last 4"""

danger_passes_by_team('Argentina')

danger_passes_by_team('France')

danger_passes_by_team('Croatia')

danger_passes_by_team('Morocco')

"""Others"""

danger_passes_by_team('Brazil')

danger_passes_by_team('Uruguay')