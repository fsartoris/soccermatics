# -*- coding: utf-8 -*-
"""Passing network.ipynb

Automatically generated by Colaboratory.

"""

!pip install mplsoccer

import matplotlib.pyplot as plt
import numpy as np
from mplsoccer import Pitch, Sbopen
import pandas as pd

"""Opening Dataset"""

parser = Sbopen()
df, related, freeze, tactics = parser.event(69301)

"""Prepare Data """

#check for index of first sub
sub = df.loc[df["type_name"] == "Substitution"].loc[df["team_name"] == "England Women's"].iloc[0]["index"]
#make df with successfull passes by England until the first substitution
mask_england = (df.type_name == 'Pass') & (df.team_name == "England Women's") & (df.index < sub) & (df.outcome_name.isnull()) & (df.sub_type_name != "Throw-in")
#taking necessary columns
df_pass = df.loc[mask_england, ['x', 'y', 'end_x', 'end_y', "player_name", "pass_recipient_name"]]
#adjusting that only the surname of a player is presented.
df_pass["player_name"] = df_pass["player_name"].apply(lambda x: str(x).split()[-1])
df_pass["pass_recipient_name"] = df_pass["pass_recipient_name"].apply(lambda x: str(x).split()[-1])

"""Calculate vertices size and locations"""

scatter_df = pd.DataFrame()
for i, name in enumerate(df_pass["player_name"].unique()):
    passx = df_pass.loc[df_pass["player_name"] == name]["x"].to_numpy()
    recx = df_pass.loc[df_pass["pass_recipient_name"] == name]["end_x"].to_numpy()
    passy = df_pass.loc[df_pass["player_name"] == name]["y"].to_numpy()
    recy = df_pass.loc[df_pass["pass_recipient_name"] == name]["end_y"].to_numpy()
    scatter_df.at[i, "player_name"] = name
    #make sure that x and y location for each circle representing the player is the average of passes and receptions
    scatter_df.at[i, "x"] = np.mean(np.concatenate([passx, recx]))
    scatter_df.at[i, "y"] = np.mean(np.concatenate([passy, recy]))
    #calculate number of passes
    scatter_df.at[i, "no"] = df_pass.loc[df_pass["player_name"] == name].count().iloc[0]

#adjust the size of a circle so that the player who made more passes
scatter_df['marker_size'] = (scatter_df['no'] / scatter_df['no'].max() * 1500)

"""Calcualte Edge width"""

#counting passes between players
df_pass["pair_key"] = df_pass.apply(lambda x: "_".join(sorted([x["player_name"], x["pass_recipient_name"]])), axis=1)
lines_df = df_pass.groupby(["pair_key"]).x.count().reset_index()
lines_df.rename({'x':'pass_count'}, axis='columns', inplace=True)
#setting a treshold. You can try to investigate how it changes when you change it.
lines_df = lines_df[lines_df['pass_count']>2]

"""Plot vertices"""

#Drawing pitch
pitch = Pitch(line_color='grey')
fig, ax = pitch.grid(grid_height=0.9, title_height=0.06, axis=False,
                     endnote_height=0.04, title_space=0, endnote_space=0)
#Scatter the location on the pitch
pitch.scatter(scatter_df.x, scatter_df.y, s=scatter_df.marker_size, color='red', edgecolors='grey', linewidth=1, alpha=1, ax=ax["pitch"], zorder = 3)
#annotating player name
for i, row in scatter_df.iterrows():
    pitch.annotate(row.player_name, xy=(row.x, row.y), c='black', va='center', ha='center', weight = "bold", size=16, ax=ax["pitch"], zorder = 4)

fig.suptitle("Nodes location - England", fontsize = 30)
plt.show()

"""Plot edges"""

#plot once again pitch and vertices
pitch = Pitch(line_color='grey')
fig, ax = pitch.grid(grid_height=0.9, title_height=0.06, axis=False,
                     endnote_height=0.04, title_space=0, endnote_space=0)
pitch.scatter(scatter_df.x, scatter_df.y, s=scatter_df.marker_size, color='red', edgecolors='grey', linewidth=1, alpha=1, ax=ax["pitch"], zorder = 3)
for i, row in scatter_df.iterrows():
    pitch.annotate(row.player_name, xy=(row.x, row.y), c='black', va='center', ha='center', weight = "bold", size=16, ax=ax["pitch"], zorder = 4)

for i, row in lines_df.iterrows():
        player1 = row["pair_key"].split("_")[0]
        player2 = row['pair_key'].split("_")[1]
        #take the average location of players to plot a line between them
        player1_x = scatter_df.loc[scatter_df["player_name"] == player1]['x'].iloc[0]
        player1_y = scatter_df.loc[scatter_df["player_name"] == player1]['y'].iloc[0]
        player2_x = scatter_df.loc[scatter_df["player_name"] == player2]['x'].iloc[0]
        player2_y = scatter_df.loc[scatter_df["player_name"] == player2]['y'].iloc[0]
        num_passes = row["pass_count"]
        #adjust the line width so that the more passes, the wider the line
        line_width = (num_passes / lines_df['pass_count'].max() * 10)
        #plot lines on the pitch
        pitch.lines(player1_x, player1_y, player2_x, player2_y,
                        alpha=1, lw=line_width, zorder=2, color="red", ax = ax["pitch"])
  
fig.suptitle("England Passing Network against Sweden", fontsize = 30)
plt.show()

"""Centralisation"""

#calculate number of successful passes by player
no_passes = df_pass.groupby(['player_name']).x.count().reset_index()
no_passes.rename({'x':'pass_count'}, axis='columns', inplace=True)
#find one who made most passes
max_no = no_passes["pass_count"].max()
#calculate the denominator - 10*the total sum of passes
denominator = 10*no_passes["pass_count"].sum()
#calculate the nominator
nominator = (max_no - no_passes["pass_count"]).sum()
#calculate the centralisation index
centralisation_index = nominator/denominator
print("Centralisation index is ", centralisation_index)

import pandas as pd
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)

#FCW data
competition_id = 43
season_id = 106
matches = parser.match(competition_id, season_id)

df, related, freeze, tactics = parser.event(69301)

def get_matches(matches, team_name):
  df_matches = matches[(matches['home_team_name']==team_name) | (matches['away_team_name']==team_name)]
  return df_matches.sort_values(by='match_date',ascending=True)

def passing_map(event_id, team_name):

  df, related, freeze, tactics = parser.event(event_id)
  
  #check for index of first sub
  sub = df.loc[df["type_name"] == "Substitution"].loc[df["team_name"] == team_name].iloc[0]["index"]
  #make df with successfull passes by England until the first substitution
  mask_team = (df.type_name == 'Pass') & (df.team_name == team_name) & (df.index < sub) & (df.outcome_name.isnull()) & (df.sub_type_name != "Throw-in")
  #taking necessary columns
  df_pass = df.loc[mask_team, ['x', 'y', 'end_x', 'end_y', "player_name", "pass_recipient_name"]]
  #adjusting that only the surname of a player is presented.
  #df_pass["player_name"] = df_pass["player_name"].apply(lambda x: str(x).split()[-1])
  #df_pass["pass_recipient_name"] = df_pass["pass_recipient_name"].apply(lambda x: str(x).split()[-1])

  scatter_df = pd.DataFrame()
  for i, name in enumerate(df_pass["player_name"].unique()):
      passx = df_pass.loc[df_pass["player_name"] == name]["x"].to_numpy()
      recx = df_pass.loc[df_pass["pass_recipient_name"] == name]["end_x"].to_numpy()
      passy = df_pass.loc[df_pass["player_name"] == name]["y"].to_numpy()
      recy = df_pass.loc[df_pass["pass_recipient_name"] == name]["end_y"].to_numpy()
      scatter_df.at[i, "player_name"] = name
      #make sure that x and y location for each circle representing the player is the average of passes and receptions
      scatter_df.at[i, "x"] = np.mean(np.concatenate([passx, recx]))
      scatter_df.at[i, "y"] = np.mean(np.concatenate([passy, recy]))
      #calculate number of passes
      scatter_df.at[i, "no"] = df_pass.loc[df_pass["player_name"] == name].count().iloc[0]

  #adjust the size of a circle so that the player who made more passes
  scatter_df['marker_size'] = (scatter_df['no'] / scatter_df['no'].max() * 1500)

  #counting passes between players
  df_pass["pair_key"] = df_pass.apply(lambda x: "_".join(sorted([x["player_name"], x["pass_recipient_name"]])), axis=1)
  lines_df = df_pass.groupby(["pair_key"]).x.count().reset_index()
  lines_df.rename({'x':'pass_count'}, axis='columns', inplace=True)
  #setting a treshold. You can try to investigate how it changes when you change it.
  lines_df = lines_df[lines_df['pass_count']>2]


  pitch = Pitch(line_color='grey')
  fig, ax = pitch.grid(grid_height=0.9, title_height=0.06, axis=False,
                     endnote_height=0.04, title_space=0, endnote_space=0)
  pitch.scatter(scatter_df.x, scatter_df.y, s=scatter_df.marker_size, color='red', edgecolors='grey', linewidth=1, alpha=1, ax=ax["pitch"], zorder = 3)
  for i, row in scatter_df.iterrows():
      pitch.annotate(row.player_name, xy=(row.x, row.y), c='black', va='center', ha='center', weight = "bold", size=16, ax=ax["pitch"], zorder = 4)

  for i, row in lines_df.iterrows():
          player1 = row["pair_key"].split("_")[0]
          player2 = row['pair_key'].split("_")[1]
          #take the average location of players to plot a line between them
          player1_x = scatter_df.loc[scatter_df["player_name"] == player1]['x'].iloc[0]
          player1_y = scatter_df.loc[scatter_df["player_name"] == player1]['y'].iloc[0]
          player2_x = scatter_df.loc[scatter_df["player_name"] == player2]['x'].iloc[0]
          player2_y = scatter_df.loc[scatter_df["player_name"] == player2]['y'].iloc[0]
          num_passes = row["pass_count"]
          #adjust the line width so that the more passes, the wider the line
          line_width = (num_passes / lines_df['pass_count'].max() * 10)
          #plot lines on the pitch
          pitch.lines(player1_x, player1_y, player2_x, player2_y,
                          alpha=1, lw=line_width, zorder=2, color="red", ax = ax["pitch"])
  
  unique_teams = df["team_name"].unique()
  subtitle = ("Passing network for match: %s vs %s" % (unique_teams[0], unique_teams[1]))

  fig.suptitle(subtitle, fontsize = 30)
  plt.show()

argentina = get_matches(matches, 'Argentina')

for index, row in argentina.iterrows():
  passing_map(row['match_id'], 'Argentina')