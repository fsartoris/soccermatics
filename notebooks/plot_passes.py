# -*- coding: utf-8 -*-
"""Plot Passes.ipynb

Automatically generated by Colaboratory.

"""

!pip install mplsoccer

#importing necessary libraries
import matplotlib.pyplot as plt
import numpy as np
from mplsoccer import Pitch, Sbopen

parser = Sbopen()
df, related, freeze, tactics = parser.event(69301)
passes = df.loc[df['type_name'] == 'Pass'].loc[df['sub_type_name'] != 'Throw-in'].set_index('id')

"""Pass map for Lucy Bronze"""

#drawing pitch
pitch = Pitch(line_color = "black")
fig, ax = pitch.draw(figsize=(10, 7))

for i,thepass in passes.iterrows():
    #if pass made by Lucy Bronze
    if thepass['player_name']=='Lucy Bronze':
        x=thepass['x']
        y=thepass['y']
        #plot circle
        passCircle=plt.Circle((x,y),2,color="blue")
        passCircle.set_alpha(.2)
        ax.add_patch(passCircle)
        dx=thepass['end_x']-x
        dy=thepass['end_y']-y
        #plot arrow
        passArrow=plt.Arrow(x,y,dx,dy,width=3,color="blue")
        ax.add_patch(passArrow)

ax.set_title("Lucy Bronze passes against Sweden", fontsize = 24)
fig.set_size_inches(10, 7)
plt.show()

"""Usin mplsoccer functions"""

mask_bronze = (df.type_name == 'Pass') & (df.player_name == "Lucy Bronze")
df_pass = df.loc[mask_bronze, ['x', 'y', 'end_x', 'end_y']]

pitch = Pitch(line_color='black')
fig, ax = pitch.grid(grid_height=0.9, title_height=0.06, axis=False,
                     endnote_height=0.04, title_space=0, endnote_space=0)
pitch.arrows(df_pass.x, df_pass.y,
            df_pass.end_x, df_pass.end_y, color = "blue", ax=ax['pitch'])
pitch.scatter(df_pass.x, df_pass.y, alpha = 0.2, s = 500, color = "blue", ax=ax['pitch'])
fig.suptitle("Lucy Bronze passes against Sweden", fontsize = 30)
plt.show()

"""Plotting Multiple Passes"""

#prepare the dataframe of passes by England that were no-throw ins
mask_england = (df.type_name == 'Pass') & (df.team_name == "England Women's") & (df.sub_type_name != "Throw-in")
df_passes = df.loc[mask_england, ['x', 'y', 'end_x', 'end_y', 'player_name']]
#get the list of all players who made a pass
names = df_passes['player_name'].unique()

#draw 4x4 pitches
pitch = Pitch(line_color='black', pad_top=20)
fig, axs = pitch.grid(ncols = 4, nrows = 4, grid_height=0.85, title_height=0.06, axis=False,
                     endnote_height=0.04, title_space=0.04, endnote_space=0.01)

#for each player
for name, ax in zip(names, axs['pitch'].flat[:len(names)]):
    #put player name over the plot
    ax.text(60, -10, name,
            ha='center', va='center', fontsize=14)
    #take only passes by this player
    player_df = df_passes.loc[df_passes["player_name"] == name]
    #scatter
    pitch.scatter(player_df.x, player_df.y, alpha = 0.2, s = 50, color = "blue", ax=ax)
    #plot arrow
    pitch.arrows(player_df.x, player_df.y,
            player_df.end_x, player_df.end_y, color = "blue", ax=ax, width=1)

#We have more than enough pitches - remove them
for ax in axs['pitch'][-1, 16 - len(names):]:
    ax.remove()

#Another way to set title using mplsoccer
axs['title'].text(0.5, 0.5, 'England passes against Sweden', ha='center', va='center', fontsize=30)
plt.show()

"""FWC 2022 - Argentina"""

import pandas as pd
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)

#FCW data
competition_id = 43
season_id = 106
matches = parser.match(competition_id, season_id)

def get_matches(matches, team_name):
  df_matches = matches[(matches['home_team_name']==team_name) | (matches['away_team_name']==team_name)]
  return df_matches.sort_values(by='match_date',ascending=True)

argentina = get_matches(matches, 'Argentina')
argentina.head(7)

df, related, freeze, tactics = parser.event(3857300)
passes = df.loc[df['type_name'] == 'Pass'].loc[df['sub_type_name'] != 'Throw-in'].set_index('id')

df.head(5)

def team_pass_map(event_id, team_name):
  df, related, freeze, tactics = parser.event(event_id)

  #prepare the dataframe of passes by Team that were no-throw ins
  mask_team = (df.type_name == 'Pass') & (df.team_name == team_name) & (df.sub_type_name != "Throw-in")
  df_passes = df.loc[mask_team, ['x', 'y', 'end_x', 'end_y', 'player_name']]
  #get the list of all players who made a pass
  names = df_passes['player_name'].unique()

  #draw 4x4 pitches
  pitch = Pitch(line_color='black', pad_top=20)
  fig, axs = pitch.grid(ncols = 5, nrows = 4, grid_height=0.85, title_height=0.06, axis=False,
                      endnote_height=0.04, title_space=0.04, endnote_space=0.01)

  #for each player
  for name, ax in zip(names, axs['pitch'].flat[:len(names)]):
      #put player name over the plot
      ax.text(60, -10, name,
              ha='center', va='center', fontsize=10)
      #take only passes by this player
      player_df = df_passes.loc[df_passes["player_name"] == name]
      #scatter
      pitch.scatter(player_df.x, player_df.y, alpha = 0.2, s = 50, color = "blue", ax=ax)
      #plot arrow
      pitch.arrows(player_df.x, player_df.y,
              player_df.end_x, player_df.end_y, color = "blue", ax=ax, width=1)

  #We have more than enough pitches - remove them
  for ax in axs['pitch'][-1, 20 - len(names):]:
      ax.remove()

  #Another way to set title using mplsoccer
  unique_teams = df["team_name"].unique()
  subtitle = ("Passing map for for match: %s vs %s" % (unique_teams[0], unique_teams[1]))
  axs['title'].text(0.5, 0.5, subtitle, ha='center', va='center', fontsize=30)
  plt.show()

"""All passing maps for Argentina in FWC 2022"""

argentina = get_matches(matches, 'Argentina')

for index, row in argentina.iterrows():
  team_pass_map(row['match_id'], 'Argentina')